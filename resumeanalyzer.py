import streamlit as st
import openai
import os
import PyPDF2
import io
# Change this import to properly use python-docx
from docx import Document

# Set page configuration
st.set_page_config(page_title="Resume Analyzer", page_icon="📄")

# App title
st.title("Resume Analyzer for Job Matching 📄")

# API Key input in sidebar
with st.sidebar:
    st.header("API Configuration")
    api_key = st.text_input("Enter your OpenAI API Key:", type="password", 
                           help="Your API key will not be stored permanently")
    
    if not api_key:
        st.warning("⚠️ Please enter an OpenAI API key to use the resume analyzer")
    
    st.markdown("---")
    st.markdown("### About")
    st.markdown("This tool analyzes your resume against job descriptions to help you find matches and improve your application.")

# Initialize session state
if "resume_text" not in st.session_state:
    st.session_state.resume_text = ""
if "job_description" not in st.session_state:
    st.session_state.job_description = ""
if "analysis_result" not in st.session_state:
    st.session_state.analysis_result = ""

# Function to extract text from PDF
def extract_text_from_pdf(file):
    pdf_reader = PyPDF2.PdfReader(file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text

# Function to extract text from DOCX - updated with correct import
def extract_text_from_docx(file):
    doc = Document(file)
    text = ""
    for para in doc.paragraphs:
        text += para.text + "\n"
    return text

# Function to analyze resume against job description
def analyze_resume(resume_text, job_description):
    if not api_key:
        return "Please enter an OpenAI API key in the sidebar to continue."
    
    try:
        client = openai.OpenAI(api_key=api_key)
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "You are a professional resume analyzer specializing in matching candidates to job requirements."},
                {"role": "user", "content": f"Here is a resume:\n\n{resume_text}\n\nAnd here is a job description:\n\n{job_description}\n\nPlease analyze how well the resume matches the job description. Cover the following points:\n1. Match percentage with explanation\n2. Key skills that match the job requirements\n3. Missing skills or qualifications\n4. Suggested improvements to the resume to better match this job\n5. Overall assessment of fit"}
            ],
            temperature=0.5,
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"Error: {str(e)}"

# Main app UI
st.subheader("Upload Your Resume")
resume_file = st.file_uploader("Upload resume (PDF or DOCX)", type=["pdf", "docx"])

if resume_file is not None:
    # Extract text based on file type
    if resume_file.type == "application/pdf":
        st.session_state.resume_text = extract_text_from_pdf(resume_file)
    elif resume_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        st.session_state.resume_text = extract_text_from_docx(resume_file)
    
    # Display preview of extracted text
    with st.expander("Resume Text Preview"):
        st.text(st.session_state.resume_text[:500] + "..." if len(st.session_state.resume_text) > 500 else st.session_state.resume_text)

st.subheader("Enter Job Description")
st.session_state.job_description = st.text_area("Paste the job description here", 
                                               height=200, 
                                               value=st.session_state.job_description)

# Analysis button
if st.button("Analyze Resume Match"):
    if not st.session_state.resume_text:
        st.error("Please upload a resume first.")
    elif not st.session_state.job_description:
        st.error("Please enter a job description.")
    else:
        with st.spinner("Analyzing your resume against the job description..."):
            st.session_state.analysis_result = analyze_resume(
                st.session_state.resume_text, 
                st.session_state.job_description
            )

# Display analysis results
if st.session_state.analysis_result:
    st.subheader("Analysis Results")
    st.markdown(st.session_state.analysis_result)
    
    # Add download button for the analysis
    analysis_download = f"""
# Resume Analysis Report

## Resume Analysis for Job Match

{st.session_state.analysis_result}

---
Generated by Resume Analyzer for Job Matching
"""
    
    st.download_button(
        label="Download Analysis Report",
        data=analysis_download,
        file_name="resume_analysis_report.md",
        mime="text/markdown"
    )
